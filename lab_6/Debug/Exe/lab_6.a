;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 25-Mar-2024
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0024 // Place your code here
; 0000 0025 
; 0000 0026 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 002D {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002E ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000014 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002F // Delay needed for the stabilization of the ADC input voltage
; 0000 0030 delay_us(10);
;PCODE: $00000018 VOL: 0
; 0000 0031 // Start the AD conversion
; 0000 0032 ADCSRA|=(1<<ADSC);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0033 // Wait for the AD conversion to complete
; 0000 0034 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0035 ADCSRA|=(1<<ADIF);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0036 return ADCW;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0037 }
;PCODE: $00000026 VOL: 0
;
;void main(void)
; 0000 003A {
;PCODE: $00000027 VOL: 0
; 0000 003B // Declare your local variables here
; 0000 003C float analog = 0.0;
; 0000 003D unsigned int adc_val = 0;
; 0000 003E char voltage_str[16];
; 0000 003F // Input/Output Ports initialization
; 0000 0040 // Port A initialization
; 0000 0041 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0042 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;	analog -> Y+16
;	adc_val -> R16,R17
;	voltage_str -> Y+0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0043 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0044 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0045 
; 0000 0046 // Port B initialization
; 0000 0047 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0048 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0049 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 004A PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004B 
; 0000 004C // Port C initialization
; 0000 004D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0050 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0051 
; 0000 0052 // Port D initialization
; 0000 0053 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0054 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0055 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=P Bit1=T Bit0=T
; 0000 0056 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0057 
; 0000 0058 // External Interrupt(s) initialization
; 0000 0059 // INT0: On
; 0000 005A // INT0 Mode: Falling Edge
; 0000 005B // INT1: Off
; 0000 005C // INT2: Off
; 0000 005D GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005E MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 005F MCUCSR=(0<<ISC2);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0060 GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0061 
; 0000 0062 // ADC initialization
; 0000 0063 // ADC Clock frequency: 172.800 kHz
; 0000 0064 // ADC Voltage Reference: AREF pin
; 0000 0065 // ADC Auto Trigger Source: ADC Stopped
; 0000 0066 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0067 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0068 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0069 
; 0000 006A // Alphanumeric LCD initialization
; 0000 006B // Connections are specified in the
; 0000 006C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 006D // RS - PORTB Bit 0
; 0000 006E // RD - PORTB Bit 2
; 0000 006F // EN - PORTB Bit 1
; 0000 0070 // D4 - PORTB Bit 4
; 0000 0071 // D5 - PORTB Bit 5
; 0000 0072 // D6 - PORTB Bit 6
; 0000 0073 // D7 - PORTB Bit 7
; 0000 0074 // Characters/line: 16
; 0000 0075 lcd_init(16);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0076 
; 0000 0077 // Global enable interrupts
; 0000 0078 #asm("sei")
;PCODE: $00000054 VOL: 0
	sei
;PCODE: $00000055 VOL: 0
; 0000 0079 
; 0000 007A while (1)
;PCODE: $00000056 VOL: 0
; 0000 007B       {
; 0000 007C       // Place your code here
; 0000 007D       if(PIND.2 == 0){
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007E             delay_ms(300);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007F             adc_val = read_adc(0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0080             analog = (float) adc_val * 5.0 / 1024.0;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0081             sprintf(voltage_str, "%1.2f V", analog);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0082 
; 0000 0083             lcd_clear();
;PCODE: $00000072 VOL: 0
; 0000 0084             lcd_gotoxy(0, 0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0085             lcd_putsf("Voltage: ");
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0086             lcd_gotoxy(0, 1);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0087             lcd_puts(voltage_str); // Display formatted voltage string
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0088                       }
; 0000 0089 
; 0000 008A       }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 008B }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
