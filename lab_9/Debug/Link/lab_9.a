;/*******************************************************
;This program was created by the CodeWizardAVR V3.40
;Automatic Program Generator
;? Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
;http://www.hpinfotech.ro
;
;Project :
;Version :
;Date    : 4/24/2024
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#define  Timer1_CLK (11059200UL / 8)
;#define  ICR1  ( ICR1L | ((unsigned int)(ICR1H) << 8))
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;// Standard Input/Output functions
;#include <stdio.h>
;
;void main(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0021 // Declare your local variables here
; 0000 0022 unsigned int a,b,c;
; 0000 0023 float high, low, period;
; 0000 0024 float freq;
; 0000 0025 float duty_cycle;
; 0000 0026 
; 0000 0027 // Declare your local variables here
; 0000 0028 
; 0000 0029 // Input/Output Ports initialization
; 0000 002A // Port A initialization
; 0000 002B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 002C DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000000E VOL: 0
;	a -> R16,R17
;	b -> R18,R19
;	c -> R20,R21
;	high -> Y+16
;	low -> Y+12
;	period -> Y+8
;	freq -> Y+4
;	duty_cycle -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 002E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002F 
; 0000 0030 // Port B initialization
; 0000 0031 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0032 DDRB=(1<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0033 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 0034 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0035 
; 0000 0036 // Port C initialization
; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0038 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 003A PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003B 
; 0000 003C // Port D initialization
; 0000 003D // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 003E DDRD=(1<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003F // State: Bit7=0 Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0040 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0041 
; 0000 0042 // Timer/Counter 0 initialization
; 0000 0043 // Clock source: System Clock
; 0000 0044 // Clock value: 43.200 kHz
; 0000 0045 // Mode: Fast PWM top=0xFF
; 0000 0046 // OC0 output: Non-Inverted PWM
; 0000 0047 // Timer Period: 5.9259 ms
; 0000 0048 // Output Pulse(s):
; 0000 0049 // OC0 Period: 5.9259 ms Width: 1.4873 ms
; 0000 004A TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 004B TCNT0=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004C OCR0=0x40;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004D 
; 0000 004E // Timer/Counter 2 initialization
; 0000 004F // Clock source: System Clock
; 0000 0050 // Clock value: 10.800 kHz
; 0000 0051 // Mode: CTC top=OCR2A
; 0000 0052 // OC2 output: Toggle on compare match
; 0000 0053 // Timer Period: 20 ms
; 0000 0054 // Output Pulse(s):
; 0000 0055 // OC2 Period: 40 ms Width: 20 ms
; 0000 0056 ASSR=0<<AS2;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0057 TCCR2=(0<<PWM2) | (0<<COM21) | (1<<COM20) | (1<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0058 TCNT2=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0059 OCR2=0xD7;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 005A 
; 0000 005B // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 005C TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 005D 
; 0000 005E 
; 0000 005F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0060 // TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
; 0000 0061 
; 0000 0062 // USART initialization
; 0000 0063 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0064 // USART Receiver: On
; 0000 0065 // USART Transmitter: On
; 0000 0066 // USART Mode: Asynchronous
; 0000 0067 // USART Baud Rate: 9600
; 0000 0068 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0069 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 006A UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 006B UBRRH=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 006C UBRRL=0x47;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 006D 
; 0000 006E     TCCR1A = 0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 006F     TCNT1=0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0070     do
;PCODE: $0000003D VOL: 0
; 0000 0071     {
; 0000 0072         TCCR1B = 0x42;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0073         TIFR = (1<<ICF1);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0074         while ((TIFR & (1<<ICF1)) == 0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0075         a = ICR1;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0076 
; 0000 0077         TCCR1B = 0x02;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0078         TIFR = (1<<ICF1);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0079         while ((TIFR & (1<<ICF1)) == 0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 007A         b = ICR1;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 007B 
; 0000 007C         TCCR1B = 0x42;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 007D         TIFR = (1<<ICF1);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 007E         while ((TIFR & (1<<ICF1)) == 0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007F         c = ICR1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0080 
; 0000 0081         TCCR1B = 0;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0082         TIFR = (1<<ICF1);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0083     }
; 0000 0084     while(a>b || b>c );      // Check for valid condition, to avoid timer overflow reading
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0085 
; 0000 0086     high= b-a;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0087     low = c-b;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0088     period = high + low;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0089     printf("a: %u b: %u c: %u \r\n ", a, b, c);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 008A 
; 0000 008B     freq = (float) (Timer1_CLK) / period;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 008C 
; 0000 008D     printf("High: %f \r\n", high / (float) Timer1_CLK );
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 008E     printf("Low: %f \r\n", low / (float) Timer1_CLK );
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 008F     printf("Period: %f \r\n", period / (float) Timer1_CLK );
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0090     duty_cycle =( high / period) * 100;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0091     printf("freq %f , Duty: %f % \r\n ", freq , duty_cycle);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0092 
; 0000 0093     while(1);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0094 }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
