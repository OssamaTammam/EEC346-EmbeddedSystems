;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : lab_8
;Version :
;Date    : 23-Apr-2024
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;unsigned char counter=0;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F // Reinitialize Timer 0 value
; 0000 0020 TCNT0=0x28;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0021 // Place your code here
; 0000 0022    counter++;
;PCODE: $00000011 VOL: 0
; 0000 0023    switch(counter){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0024         case 99:
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0025         PORTB.0=0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0026         break;
;PCODE: $00000018 VOL: 0
; 0000 0027         case 100:
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0028         PORTB.0=1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0029         counter=0;
;PCODE: $0000001E VOL: 0
; 0000 002A         break;
;PCODE: $0000001F VOL: 0
; 0000 002B         default:
;PCODE: $00000020 VOL: 0
; 0000 002C         break;
;PCODE: $00000021 VOL: 0
; 0000 002D    }
;PCODE: $00000022 VOL: 0
; 0000 002E 
; 0000 002F }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;// Analog Comparator interrupt service routine
;interrupt [ANA_COMP] void ana_comp_isr(void)
; 0000 0033 {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0034 // Place your code here
; 0000 0035 ACSR=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0036 TCCR0=0x05;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0037 TCNT0=0x28;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0038 
; 0000 0039 }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;void main(void)
; 0000 003C {
;PCODE: $00000031 VOL: 0
; 0000 003D // Declare your local variables here
; 0000 003E 
; 0000 003F // Input/Output Ports initialization
; 0000 0040 // Port A initialization
; 0000 0041 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0042 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0043 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0044 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0045 
; 0000 0046 // Port B initialization
; 0000 0047 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 0048 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0049 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=1
; 0000 004A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004B 
; 0000 004C // Port C initialization
; 0000 004D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0050 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0051 
; 0000 0052 // Port D initialization
; 0000 0053 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0054 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0055 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0056 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0057 
; 0000 0058 // Timer/Counter 0 initialization
; 0000 0059 // Clock source: System Clock
; 0000 005A // Clock value: 10.800 kHz
; 0000 005B // Mode: Normal top=0xFF
; 0000 005C // OC0 output: Disconnected
; 0000 005D // Timer Period: 20 ms
; 0000 005E // TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
; 0000 005F TCCR0=0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0060 // TCNT0=0x28;
; 0000 0061 // OCR0=0x00;
; 0000 0062 
; 0000 0063 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0064 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0065 
; 0000 0066 // Analog Comparator initialization
; 0000 0067 // Analog Comparator: On
; 0000 0068 // The Analog Comparator's positive input is
; 0000 0069 // connected to the AIN0 pin
; 0000 006A // The Analog Comparator's negative input is
; 0000 006B // connected to the AIN1 pin
; 0000 006C // Interrupt on Falling Output Edge
; 0000 006D // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 006E ACSR=(0<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (1<<ACIE) | (0<<ACIC) | (1<<ACIS1) | (0<<ACIS0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 006F SFIOR=(0<<ACME);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0070 
; 0000 0071 // Global enable interrupts
; 0000 0072 #asm("sei")
;PCODE: $0000004A VOL: 0
	sei
;PCODE: $0000004B VOL: 0
; 0000 0073 
; 0000 0074 while (1)
;PCODE: $0000004C VOL: 0
; 0000 0075       {
; 0000 0076       // Place your code here
; 0000 0077 
; 0000 0078       }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0079 }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
