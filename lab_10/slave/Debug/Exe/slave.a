;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 07-May-2024
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;// SPI interrupt service routine
;interrupt [SPI_STC] void spi_isr(void)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F     PORTD=~SPDR;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0020     SPDR=PINA;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0021 
; 0000 0022 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;void main(void)
; 0000 0025 {
;PCODE: $00000017 VOL: 0
; 0000 0026 // Declare your local variables here
; 0000 0027 
; 0000 0028 // Input/Output Ports initialization
; 0000 0029 // Port A initialization
; 0000 002A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 002B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002C // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 002D PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002E 
; 0000 002F // Port B initialization
; 0000 0030 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0031 DDRB=(0<<DDB7) | (1<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0032 // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0033 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0034 
; 0000 0035 // Port C initialization
; 0000 0036 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0037 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0038 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0039 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003A 
; 0000 003B // Port D initialization
; 0000 003C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 003D DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003E // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 003F PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0040 
; 0000 0041 // SPI initialization
; 0000 0042 // SPI Type: Slave
; 0000 0043 // SPI Clock Rate: 2764.800 kHz
; 0000 0044 // SPI Clock Phase: Cycle Start
; 0000 0045 // SPI Clock Polarity: Low
; 0000 0046 // SPI Data Order: LSB First
; 0000 0047 SPCR=(1<<SPIE) | (1<<SPE) | (1<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0048 SPSR=(0<<SPI2X);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0049 
; 0000 004A // Clear the SPI interrupt flag
; 0000 004B #asm
;PCODE: $0000002C VOL: 0
; 0000 004C     in   r30,spsr
    in   r30,spsr
;PCODE: $0000002D VOL: 0
; 0000 004D     in   r30,spdr
    in   r30,spdr
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004E #endasm
; 0000 004F 
; 0000 0050 // Global enable interrupts
; 0000 0051 #asm("sei")
;PCODE: $00000030 VOL: 0
	sei
;PCODE: $00000031 VOL: 0
; 0000 0052 
; 0000 0053 while (1)
;PCODE: $00000032 VOL: 0
; 0000 0054       {
; 0000 0055       // Place your code here
; 0000 0056 
; 0000 0057       }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0058 }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
